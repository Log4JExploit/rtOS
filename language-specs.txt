### Abstract ###

This document contains the syntax and grammer
of the runtimeOS script language.

### Document Syntax ###

{x}: One or more of x
[x]: One ore zero of x
(a | b): either a or b
_any: any character
33-123: any number between 33 and 123, including 33 and 123
x-x: any range of symbols, where x is the actual character (alpha, digits, etc.), including x. 
!x-!x: any range of sybols, where x is the number substitute found for the actual character in the ascii table, including x. Must be positive Integer smaller than or equal to 255.
utf8: any utf8 character
utf16: any utf16 character
(utf8 | utf16)-nonctrl: any non-control character, meaning the exclusion of characters !0-!31 
newline: a literal new line character (aka \n)

### Definitions ###

Identifier:
   (a-z | $) {(a-z | A-Z | 0-9 | $ | _)}

BaseType:
   bool
   byte
   char
   short
   int
   float
   double
   long
   string

Bool:
   ( true | false )

Newline:
   newline
   newline \r

Char:
   ' utf16-nonctrl '

String:
   " { utf16-nonctrl } "

Byte:
   0-255 b

Integer:
   1-9 { 0-9 }

Decimal:
   ( 0 . 0-9 | Integer [ . 0-9 ] ) { 0-9 } ( f | d )

Number:
   Byte
   Integer
   Decimal
   Exponent

Exponent:
   ( Integer | Decimal ) ( e | E ) ( + | - ) Integer 

Value:
   Bool
   Char
   String
   Number

ValueList:
   [ Value { , Value } ]

Instruction:
   Create
   Store
   Delete
   Calc
   For
   ForComplex
   If
   Increment
   Decrement
   Exit

Context: 
   { Instruction } done

Create:
   create Identifier [ : BasicType ]

Store:
   store ( Value | Identifier ) Identifier

StoreLast:
   store Identifier

Delete:
   delete Identifier

Increment:
   ( inc | increment ) Identifier

Decrement:
   ( dec | decrement ) Identifier

LogicalConnect:
  ||
  &&

LogicalCompare:
  <
  >
  <=
  >=

Equals:
  ==

Operator:
   ( * | / | + | - )

Operand:
   ( Identifier | Value )

Calculation:
   ( Operand | ( Calc ) ) Operator ( Operand | ( Calc ) ) { Operator ( Operand | ( Calc ) ) }

Calc:
   calc Calculation

NumOrId:
   ( Number | Identifier )

LogicContruct:
  ( NumOrId ( LogicalCompare | Equals ) NumOrId ) { LogicalConnect LogicalConstruct }

Logical:
   logic LogicConstruct

For:
   for ( Identifier | Number ) : Context

ForComplex:
   for ( up | down ) ( Identifier | Number ) until ( ( below | over ) Number | ( Identifier | Number | Invoke | Logical ) ) : Context done

While:
   while ( Logical | Invoke ) : Context

Else:
   else : Context

If: 
   if ( FunctionReference | Identifier | Bool | Logical ) : Context ( else If | Else )

FunctionReference:
   invoke [ Identifier ] :: Identifier ( ValueList ) 

FunctionDeclaration:
   function Identifier ( [ Identifier : BasicType { , Identifier : BasicType } ] ) : Context
